/**

@fn void vrna_db_flatten(char *structure, unsigned int options)
@scripting
@parblock
This function flattens an input structure string in-place!
The second parameter is optional and defaults to #VRNA_BRACKETS_DEFAULT.

An overloaded version of this function exists, where an additional second
parameter can be passed to specify the target brackets, i.e. the type of
matching pair characters all brackets will be flattened to.
Therefore, in the scripting language interface this function is a replacement
for vrna_db_flatten_to().
@endparblock


@fn void vrna_db_flatten_to(char *string, const char target[3], unsigned int options)
@scripting
@parblock
This function is available as an overloaded version of vrna_db_flatten()
@endparblock

@fn char *vrna_db_pk_remove(const char *structure, unsigned int options)
@scripting
@parblock
This function is available as an overloaded function @p db_pk_remove() where
the optional second parameter @p options defaults to #VRNA_BRACKETS_ANY.
@endparblock

@fn short *vrna_ptable(const char *structure)
@scripting
@parblock
This functions is wrapped as overloaded function @p ptable() that takes
an optional argument @p options to specify which type of matching brackets
should be considered during conversion. The default set is round brackets,
i.e. #VRNA_BRACKETS_RND.
@endparblock


@fn short *vrna_ptable_from_string(const char *structure, unsigned int options)
@scripting
@parblock
This functions is wrapped as overloaded function @p ptable() that takes
an optional argument @p options to specify which type of matching brackets
should be considered during conversion. The default set is round brackets,
i.e. #VRNA_BRACKETS_RND.
@endparblock

@fn char *vrna_abstract_shapes(const char *structure, unsigned int  level)
@scripting
@parblock
This function is available as an overloaded function @p abstract_shapes() where
the optional second parameter @p level defaults to 5.
@endparblock

@fn char *vrna_abstract_shapes_pt(const short *pt, unsigned int level)
@scripting
@parblock
This function is available as an overloaded function @p abstract_shapes() where
the optional second parameter @p level defaults to 5.
@endparblock

@fn int vrna_bp_distance_pt(const short *pt1, const short *pt2)
@scripting
@parblock
This function is available as an overloaded method @b bp_distance().
@endparblock

@fn int vrna_bp_distance(const char *str1, const char *str2)
@scripting
@parblock
This function is available as an overloaded method @b bp_distance().
Note that the SWIG wrapper takes two structure in dot-bracket notation and converts them into
pair tables using vrna_ptable_from_string(). The resulting pair tables are then internally
passed to vrna_bp_distance_pt(). To control which kind of matching brackets will be used
during conversion, the optional argument @p options can be used. See also the description of
vrna_ptable_from_string() for available options. (default: @b VRNA_BRACKETS_RND).
@endparblock

*/
